import os
from datetime import datetime, timedelta
from aiohttp.web import HTTPUnauthorized

from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode

from bot.filters.chat_type import ChatTypeFilter
from bot.utils.api import Api

req_router = Router()
ADMINS = os.getenv('ADMIN_IDS')
admins = list(map(int, ADMINS.split(',')))
pending_requests = {} # FIXME: –ü–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ asyncpg –∏–ª–∏ –¥—Ä—É–≥—É—é –±–¥, –¥–∞–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –∏–º–µ–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —Ä–µ—Å—Ç–∞—Ä—Ç–∞–º
allowed_plans = ("vless_free", "vless_30", "vless_14", "vless_7") # FIXME: –û–ø—è—Ç—å –∂–µ, –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –±–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∏–Ω–≥–∞

def make_confirm_kb(user_id: int, plan: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"confirm:{user_id}:{plan}:yes"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"confirm:{user_id}:{plan}:no"
            ),
        ]
    ])

@req_router.message(Command("request"), ChatTypeFilter("private"))
async def cmd_request(message: Message, bot: Bot):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –ø–ª–∞–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /request vless_free")
        return
    plan = args[1].strip()
    user_id = message.from_user.id

    if not plan in allowed_plans:
        await message.reply(f"–¢–∞–∫–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ: {allowed_plans}")
        return

    pending_requests[user_id] = plan

    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.from_user.full_name} " \
           f"({user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞: {plan}"

    for admin_id in admins:
        try:
            await bot.send_message(admin_id, text, reply_markup=make_confirm_kb(user_id, plan))
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")

@req_router.callback_query(F.data.startswith("confirm"))
async def process_confirmation(callback: CallbackQuery, bot: Bot, api: Api):
    if callback.from_user.id not in admins:
        await callback.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å —ç—Ç–æ –¥–µ–ª–∞—Ç—å.", show_alert=True)
        return

    _, user_id_str, plan, action = callback.data.split(":")
    user_id = int(user_id_str)

    if user_id not in pending_requests:
        await callback.answer("–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return

    if action == "yes":
        answer_text = f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–ª–∞–Ω '{plan}' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n‚è∞ –û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏"
        await callback.message.edit_text(callback.message.text + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
        try:
            await bot.send_message(user_id, answer_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        expire_timestamp = 0
        data_limit_bytes = 0

        plan_duration_part = plan.split('_')[-1] 

        if plan_duration_part.isdigit():
            days = int(plan_duration_part)
            expire_datetime = datetime.now() + timedelta(days=days)
            expire_timestamp = int(expire_datetime.timestamp())
            data_limit_bytes = 0
        elif plan_duration_part == "free":
            expire_timestamp = 0 
            data_limit_bytes = 2 * 1024 * 1024 * 1024  # 2 –ì–±
        
        try:
            base_username = str(user_id)
            current_username = base_username
            suffix = 0

            while True:
                try:
                    data = await api.add_user(
                        username=current_username,
                        status="active",
                        expire=expire_timestamp,
                        data_limit=data_limit_bytes,
                        data_limit_reset_strategy="no_reset",
                        note="Telegram –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"
                    )
                    break
                except HTTPUnauthorized:
                    suffix += 1
                    current_username = f"{base_username}_{suffix}"
                    print(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—Ä–æ–±—É–µ–º —Å username = {current_username}")

            del pending_requests[user_id]
            await bot.send_message(
                user_id,
                f"üòä –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞, –≥–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ /install\n\n<code>{data['subscription_url']}</code>",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –¥–ª—è {user_id}: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API.", show_alert=True)

    elif action == "no":
        await callback.message.edit_text(callback.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        try:
            await bot.send_message(user_id, "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        del pending_requests[user_id]

    await callback.answer()
