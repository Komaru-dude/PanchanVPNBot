from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode

from bot.utils.api import Api
from bot.filters.admin_command import AdminCmdFilter
from bot.filters.chat_type import ChatTypeFilter

stats_router = Router()

@stats_router.message(Command("stats"), AdminCmdFilter(), ChatTypeFilter("private"))
async def cmd_stats(message: Message, api: Api):
    data = await api.get_stats()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –û–ó–£ –≤ –ú–ë
    mem_used_bytes = data["mem_used"]
    mem_total_bytes = data["mem_total"]
    mem_used_mb = f"{(mem_used_bytes / (1024 * 1024)):.2f}" if mem_used_bytes is not None else "N/A"
    mem_total_mb = f"{(mem_total_bytes / (1024 * 1024)):.2f}" if mem_total_bytes is not None else "N/A"

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –±–∞–π—Ç –≤ –ú–ë
    incoming_bandwidth_mb = f"{(data['incoming_bandwidth'] / (1024 * 1024)):.2f}" if data['incoming_bandwidth'] is not None else "N/A"
    outgoing_bandwidth_mb = f"{(data['outgoing_bandwidth'] / (1024 * 1024)):.2f}" if data['outgoing_bandwidth'] is not None else "N/A"

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑ –ë/—Å –≤ –ú–±–∏—Ç/—Å (1 –±–∞–π—Ç = 8 –±–∏—Ç)
    # –ú–±–∏—Ç/—Å = (–ë–∞–π—Ç/—Å * 8) / (1000 * 1000)
    incoming_bandwidth_speed_mbps = f"{(data['incoming_bandwidth_speed'] * 8 / (1000 * 1000)):.2f}" if data['incoming_bandwidth_speed'] is not None else "N/A"
    outgoing_bandwidth_speed_mbps = f"{(data['outgoing_bandwidth_speed'] * 8 / (1000 * 1000)):.2f}" if data['outgoing_bandwidth_speed'] is not None else "N/A"


    answer = (
        f"üß† <b>–°–∏—Å—Ç–µ–º–∞</b>\n"
        f"üîñ –í–µ—Ä—Å–∏—è: <code>{data['version']}</code>\n"
        f"üíæ –û–ó–£: <code>{mem_used_mb} –ú–ë / {mem_total_mb} –ú–ë</code>\n"
        f"üßÆ CPU: {data['cpu_cores']} —è–¥–µ—Ä, –Ω–∞–≥—Ä—É–∑–∫–∞: <code>{data['cpu_usage']}%</code>\n\n"

        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n"
        f"üî¢ –í—Å–µ–≥–æ: <code>{data['total_user']}</code>\n"
        f"üü¢ –û–Ω–ª–∞–π–Ω: <code>{data['online_users']}</code>\n"
        f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã: <code>{data['users_active']}</code>\n"
        f"‚è∏Ô∏è –û–∂–∏–¥–∞—é—Ç: <code>{data['users_on_hold']}</code>\n"
        f"‚õîÔ∏è –û—Ç–∫–ª—é—á–µ–Ω—ã: <code>{data['users_disabled']}</code>\n"
        f"‚åõÔ∏è –ò—Å—Ç—ë–∫ —Å—Ä–æ–∫: <code>{data['users_expired']}</code>\n"
        f"üìâ –û–≥—Ä–∞–Ω–∏—á–µ–Ω—ã: <code>{data['users_limited']}</code>\n\n"

        f"üåê <b>–¢—Ä–∞—Ñ–∏–∫</b>\n"
        f"‚¨áÔ∏è –í—Ö–æ–¥—è—â–∏–π: <code>{incoming_bandwidth_mb} –ú–ë</code>\n"
        f"‚¨ÜÔ∏è –ò—Å—Ö–æ–¥—è—â–∏–π: <code>{outgoing_bandwidth_mb} –ú–ë</code>\n"
        f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ö–æ–¥—è—â–∞—è: <code>{incoming_bandwidth_speed_mbps} –ú–±–∏—Ç/—Å</code>\n"
        f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å –∏—Å—Ö–æ–¥—è—â–∞—è: <code>{outgoing_bandwidth_speed_mbps} –ú–±–∏—Ç/—Å</code>"
    )

    await message.reply(answer, parse_mode=ParseMode.HTML)